// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: boostport/privacy/testing/test.proto

package testing

import (
	_ "github.com/Boostport/protoprivacy/internal/generated/boostport/privacy"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestNested1 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data1       *string                `protobuf:"bytes,1,opt,name=data1"`
	xxx_hidden_Data2       *string                `protobuf:"bytes,2,opt,name=data2"`
	xxx_hidden_Data3       *string                `protobuf:"bytes,3,opt,name=data3"`
	xxx_hidden_Data4       *string                `protobuf:"bytes,4,opt,name=data4"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestNested1) Reset() {
	*x = TestNested1{}
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestNested1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNested1) ProtoMessage() {}

func (x *TestNested1) ProtoReflect() protoreflect.Message {
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestNested1) GetData1() string {
	if x != nil {
		if x.xxx_hidden_Data1 != nil {
			return *x.xxx_hidden_Data1
		}
		return ""
	}
	return ""
}

func (x *TestNested1) GetData2() string {
	if x != nil {
		if x.xxx_hidden_Data2 != nil {
			return *x.xxx_hidden_Data2
		}
		return ""
	}
	return ""
}

func (x *TestNested1) GetData3() string {
	if x != nil {
		if x.xxx_hidden_Data3 != nil {
			return *x.xxx_hidden_Data3
		}
		return ""
	}
	return ""
}

func (x *TestNested1) GetData4() string {
	if x != nil {
		if x.xxx_hidden_Data4 != nil {
			return *x.xxx_hidden_Data4
		}
		return ""
	}
	return ""
}

func (x *TestNested1) SetData1(v string) {
	x.xxx_hidden_Data1 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *TestNested1) SetData2(v string) {
	x.xxx_hidden_Data2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TestNested1) SetData3(v string) {
	x.xxx_hidden_Data3 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TestNested1) SetData4(v string) {
	x.xxx_hidden_Data4 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *TestNested1) HasData1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestNested1) HasData2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestNested1) HasData3() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestNested1) HasData4() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestNested1) ClearData1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Data1 = nil
}

func (x *TestNested1) ClearData2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Data2 = nil
}

func (x *TestNested1) ClearData3() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Data3 = nil
}

func (x *TestNested1) ClearData4() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Data4 = nil
}

type TestNested1_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data1 *string
	Data2 *string
	Data3 *string
	Data4 *string
}

func (b0 TestNested1_builder) Build() *TestNested1 {
	m0 := &TestNested1{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Data1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Data1 = b.Data1
	}
	if b.Data2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Data2 = b.Data2
	}
	if b.Data3 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Data3 = b.Data3
	}
	if b.Data4 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Data4 = b.Data4
	}
	return m0
}

type TestNested2 struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data1       *string                `protobuf:"bytes,1,opt,name=data1"`
	xxx_hidden_Data2       *string                `protobuf:"bytes,2,opt,name=data2"`
	xxx_hidden_Data3       *string                `protobuf:"bytes,3,opt,name=data3"`
	xxx_hidden_Data4       *string                `protobuf:"bytes,4,opt,name=data4"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestNested2) Reset() {
	*x = TestNested2{}
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestNested2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNested2) ProtoMessage() {}

func (x *TestNested2) ProtoReflect() protoreflect.Message {
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestNested2) GetData1() string {
	if x != nil {
		if x.xxx_hidden_Data1 != nil {
			return *x.xxx_hidden_Data1
		}
		return ""
	}
	return ""
}

func (x *TestNested2) GetData2() string {
	if x != nil {
		if x.xxx_hidden_Data2 != nil {
			return *x.xxx_hidden_Data2
		}
		return ""
	}
	return ""
}

func (x *TestNested2) GetData3() string {
	if x != nil {
		if x.xxx_hidden_Data3 != nil {
			return *x.xxx_hidden_Data3
		}
		return ""
	}
	return ""
}

func (x *TestNested2) GetData4() string {
	if x != nil {
		if x.xxx_hidden_Data4 != nil {
			return *x.xxx_hidden_Data4
		}
		return ""
	}
	return ""
}

func (x *TestNested2) SetData1(v string) {
	x.xxx_hidden_Data1 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *TestNested2) SetData2(v string) {
	x.xxx_hidden_Data2 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *TestNested2) SetData3(v string) {
	x.xxx_hidden_Data3 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *TestNested2) SetData4(v string) {
	x.xxx_hidden_Data4 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *TestNested2) HasData1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestNested2) HasData2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestNested2) HasData3() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestNested2) HasData4() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestNested2) ClearData1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Data1 = nil
}

func (x *TestNested2) ClearData2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Data2 = nil
}

func (x *TestNested2) ClearData3() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Data3 = nil
}

func (x *TestNested2) ClearData4() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Data4 = nil
}

type TestNested2_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data1 *string
	Data2 *string
	Data3 *string
	Data4 *string
}

func (b0 TestNested2_builder) Build() *TestNested2 {
	m0 := &TestNested2{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Data1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Data1 = b.Data1
	}
	if b.Data2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Data2 = b.Data2
	}
	if b.Data3 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Data3 = b.Data3
	}
	if b.Data4 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Data4 = b.Data4
	}
	return m0
}

type TestMessage struct {
	state                  protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                 `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Data1       *string                 `protobuf:"bytes,2,opt,name=data1"`
	xxx_hidden_Data2       *TestNested1            `protobuf:"bytes,3,opt,name=data2"`
	xxx_hidden_Data3       *TestNested2            `protobuf:"bytes,4,opt,name=data3"`
	xxx_hidden_Data4       []string                `protobuf:"bytes,5,rep,name=data4"`
	xxx_hidden_Data5       *[]*TestNested1         `protobuf:"bytes,6,rep,name=data5"`
	xxx_hidden_Data6       *[]*TestNested2         `protobuf:"bytes,7,rep,name=data6"`
	xxx_hidden_Data7       map[string]string       `protobuf:"bytes,8,rep,name=data7" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Data8       map[string]*TestNested1 `protobuf:"bytes,9,rep,name=data8" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Data9       map[string]*TestNested2 `protobuf:"bytes,10,rep,name=data9" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestMessage) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestMessage) GetData1() string {
	if x != nil {
		if x.xxx_hidden_Data1 != nil {
			return *x.xxx_hidden_Data1
		}
		return ""
	}
	return ""
}

func (x *TestMessage) GetData2() *TestNested1 {
	if x != nil {
		return x.xxx_hidden_Data2
	}
	return nil
}

func (x *TestMessage) GetData3() *TestNested2 {
	if x != nil {
		return x.xxx_hidden_Data3
	}
	return nil
}

func (x *TestMessage) GetData4() []string {
	if x != nil {
		return x.xxx_hidden_Data4
	}
	return nil
}

func (x *TestMessage) GetData5() []*TestNested1 {
	if x != nil {
		if x.xxx_hidden_Data5 != nil {
			return *x.xxx_hidden_Data5
		}
	}
	return nil
}

func (x *TestMessage) GetData6() []*TestNested2 {
	if x != nil {
		if x.xxx_hidden_Data6 != nil {
			return *x.xxx_hidden_Data6
		}
	}
	return nil
}

func (x *TestMessage) GetData7() map[string]string {
	if x != nil {
		return x.xxx_hidden_Data7
	}
	return nil
}

func (x *TestMessage) GetData8() map[string]*TestNested1 {
	if x != nil {
		return x.xxx_hidden_Data8
	}
	return nil
}

func (x *TestMessage) GetData9() map[string]*TestNested2 {
	if x != nil {
		return x.xxx_hidden_Data9
	}
	return nil
}

func (x *TestMessage) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 10)
}

func (x *TestMessage) SetData1(v string) {
	x.xxx_hidden_Data1 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 10)
}

func (x *TestMessage) SetData2(v *TestNested1) {
	x.xxx_hidden_Data2 = v
}

func (x *TestMessage) SetData3(v *TestNested2) {
	x.xxx_hidden_Data3 = v
}

func (x *TestMessage) SetData4(v []string) {
	x.xxx_hidden_Data4 = v
}

func (x *TestMessage) SetData5(v []*TestNested1) {
	x.xxx_hidden_Data5 = &v
}

func (x *TestMessage) SetData6(v []*TestNested2) {
	x.xxx_hidden_Data6 = &v
}

func (x *TestMessage) SetData7(v map[string]string) {
	x.xxx_hidden_Data7 = v
}

func (x *TestMessage) SetData8(v map[string]*TestNested1) {
	x.xxx_hidden_Data8 = v
}

func (x *TestMessage) SetData9(v map[string]*TestNested2) {
	x.xxx_hidden_Data9 = v
}

func (x *TestMessage) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestMessage) HasData1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestMessage) HasData2() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data2 != nil
}

func (x *TestMessage) HasData3() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data3 != nil
}

func (x *TestMessage) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestMessage) ClearData1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Data1 = nil
}

func (x *TestMessage) ClearData2() {
	x.xxx_hidden_Data2 = nil
}

func (x *TestMessage) ClearData3() {
	x.xxx_hidden_Data3 = nil
}

type TestMessage_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id    *string
	Data1 *string
	Data2 *TestNested1
	Data3 *TestNested2
	Data4 []string
	Data5 []*TestNested1
	Data6 []*TestNested2
	Data7 map[string]string
	Data8 map[string]*TestNested1
	Data9 map[string]*TestNested2
}

func (b0 TestMessage_builder) Build() *TestMessage {
	m0 := &TestMessage{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 10)
		x.xxx_hidden_Id = b.Id
	}
	if b.Data1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 10)
		x.xxx_hidden_Data1 = b.Data1
	}
	x.xxx_hidden_Data2 = b.Data2
	x.xxx_hidden_Data3 = b.Data3
	x.xxx_hidden_Data4 = b.Data4
	x.xxx_hidden_Data5 = &b.Data5
	x.xxx_hidden_Data6 = &b.Data6
	x.xxx_hidden_Data7 = b.Data7
	x.xxx_hidden_Data8 = b.Data8
	x.xxx_hidden_Data9 = b.Data9
	return m0
}

type TestFallbackTypes struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Data1       float64                `protobuf:"fixed64,2,opt,name=data1"`
	xxx_hidden_Data2       float32                `protobuf:"fixed32,3,opt,name=data2"`
	xxx_hidden_Data3       int32                  `protobuf:"varint,4,opt,name=data3"`
	xxx_hidden_Data4       int64                  `protobuf:"varint,5,opt,name=data4"`
	xxx_hidden_Data5       uint32                 `protobuf:"varint,6,opt,name=data5"`
	xxx_hidden_Data6       uint64                 `protobuf:"varint,7,opt,name=data6"`
	xxx_hidden_Data7       int32                  `protobuf:"zigzag32,8,opt,name=data7"`
	xxx_hidden_Data8       int64                  `protobuf:"zigzag64,9,opt,name=data8"`
	xxx_hidden_Data9       uint32                 `protobuf:"fixed32,10,opt,name=data9"`
	xxx_hidden_Data10      uint64                 `protobuf:"fixed64,11,opt,name=data10"`
	xxx_hidden_Data11      int32                  `protobuf:"fixed32,12,opt,name=data11"`
	xxx_hidden_Data12      int64                  `protobuf:"fixed64,13,opt,name=data12"`
	xxx_hidden_Data13      bool                   `protobuf:"varint,14,opt,name=data13"`
	xxx_hidden_Data14      *string                `protobuf:"bytes,15,opt,name=data14"`
	xxx_hidden_Data15      []byte                 `protobuf:"bytes,16,opt,name=data15"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestFallbackTypes) Reset() {
	*x = TestFallbackTypes{}
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestFallbackTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFallbackTypes) ProtoMessage() {}

func (x *TestFallbackTypes) ProtoReflect() protoreflect.Message {
	mi := &file_boostport_privacy_testing_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TestFallbackTypes) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *TestFallbackTypes) GetData1() float64 {
	if x != nil {
		return x.xxx_hidden_Data1
	}
	return 0
}

func (x *TestFallbackTypes) GetData2() float32 {
	if x != nil {
		return x.xxx_hidden_Data2
	}
	return 0
}

func (x *TestFallbackTypes) GetData3() int32 {
	if x != nil {
		return x.xxx_hidden_Data3
	}
	return 0
}

func (x *TestFallbackTypes) GetData4() int64 {
	if x != nil {
		return x.xxx_hidden_Data4
	}
	return 0
}

func (x *TestFallbackTypes) GetData5() uint32 {
	if x != nil {
		return x.xxx_hidden_Data5
	}
	return 0
}

func (x *TestFallbackTypes) GetData6() uint64 {
	if x != nil {
		return x.xxx_hidden_Data6
	}
	return 0
}

func (x *TestFallbackTypes) GetData7() int32 {
	if x != nil {
		return x.xxx_hidden_Data7
	}
	return 0
}

func (x *TestFallbackTypes) GetData8() int64 {
	if x != nil {
		return x.xxx_hidden_Data8
	}
	return 0
}

func (x *TestFallbackTypes) GetData9() uint32 {
	if x != nil {
		return x.xxx_hidden_Data9
	}
	return 0
}

func (x *TestFallbackTypes) GetData10() uint64 {
	if x != nil {
		return x.xxx_hidden_Data10
	}
	return 0
}

func (x *TestFallbackTypes) GetData11() int32 {
	if x != nil {
		return x.xxx_hidden_Data11
	}
	return 0
}

func (x *TestFallbackTypes) GetData12() int64 {
	if x != nil {
		return x.xxx_hidden_Data12
	}
	return 0
}

func (x *TestFallbackTypes) GetData13() bool {
	if x != nil {
		return x.xxx_hidden_Data13
	}
	return false
}

func (x *TestFallbackTypes) GetData14() string {
	if x != nil {
		if x.xxx_hidden_Data14 != nil {
			return *x.xxx_hidden_Data14
		}
		return ""
	}
	return ""
}

func (x *TestFallbackTypes) GetData15() []byte {
	if x != nil {
		return x.xxx_hidden_Data15
	}
	return nil
}

func (x *TestFallbackTypes) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 16)
}

func (x *TestFallbackTypes) SetData1(v float64) {
	x.xxx_hidden_Data1 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 16)
}

func (x *TestFallbackTypes) SetData2(v float32) {
	x.xxx_hidden_Data2 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 16)
}

func (x *TestFallbackTypes) SetData3(v int32) {
	x.xxx_hidden_Data3 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 16)
}

func (x *TestFallbackTypes) SetData4(v int64) {
	x.xxx_hidden_Data4 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 16)
}

func (x *TestFallbackTypes) SetData5(v uint32) {
	x.xxx_hidden_Data5 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 16)
}

func (x *TestFallbackTypes) SetData6(v uint64) {
	x.xxx_hidden_Data6 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 16)
}

func (x *TestFallbackTypes) SetData7(v int32) {
	x.xxx_hidden_Data7 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 16)
}

func (x *TestFallbackTypes) SetData8(v int64) {
	x.xxx_hidden_Data8 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 16)
}

func (x *TestFallbackTypes) SetData9(v uint32) {
	x.xxx_hidden_Data9 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 16)
}

func (x *TestFallbackTypes) SetData10(v uint64) {
	x.xxx_hidden_Data10 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 16)
}

func (x *TestFallbackTypes) SetData11(v int32) {
	x.xxx_hidden_Data11 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 16)
}

func (x *TestFallbackTypes) SetData12(v int64) {
	x.xxx_hidden_Data12 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 16)
}

func (x *TestFallbackTypes) SetData13(v bool) {
	x.xxx_hidden_Data13 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 13, 16)
}

func (x *TestFallbackTypes) SetData14(v string) {
	x.xxx_hidden_Data14 = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 16)
}

func (x *TestFallbackTypes) SetData15(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data15 = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 15, 16)
}

func (x *TestFallbackTypes) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TestFallbackTypes) HasData1() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TestFallbackTypes) HasData2() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TestFallbackTypes) HasData3() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TestFallbackTypes) HasData4() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TestFallbackTypes) HasData5() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TestFallbackTypes) HasData6() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TestFallbackTypes) HasData7() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *TestFallbackTypes) HasData8() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TestFallbackTypes) HasData9() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *TestFallbackTypes) HasData10() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *TestFallbackTypes) HasData11() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *TestFallbackTypes) HasData12() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *TestFallbackTypes) HasData13() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 13)
}

func (x *TestFallbackTypes) HasData14() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *TestFallbackTypes) HasData15() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 15)
}

func (x *TestFallbackTypes) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *TestFallbackTypes) ClearData1() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Data1 = 0
}

func (x *TestFallbackTypes) ClearData2() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Data2 = 0
}

func (x *TestFallbackTypes) ClearData3() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Data3 = 0
}

func (x *TestFallbackTypes) ClearData4() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Data4 = 0
}

func (x *TestFallbackTypes) ClearData5() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Data5 = 0
}

func (x *TestFallbackTypes) ClearData6() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Data6 = 0
}

func (x *TestFallbackTypes) ClearData7() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Data7 = 0
}

func (x *TestFallbackTypes) ClearData8() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Data8 = 0
}

func (x *TestFallbackTypes) ClearData9() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Data9 = 0
}

func (x *TestFallbackTypes) ClearData10() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Data10 = 0
}

func (x *TestFallbackTypes) ClearData11() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_Data11 = 0
}

func (x *TestFallbackTypes) ClearData12() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_Data12 = 0
}

func (x *TestFallbackTypes) ClearData13() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 13)
	x.xxx_hidden_Data13 = false
}

func (x *TestFallbackTypes) ClearData14() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_Data14 = nil
}

func (x *TestFallbackTypes) ClearData15() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 15)
	x.xxx_hidden_Data15 = nil
}

type TestFallbackTypes_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id     *string
	Data1  *float64
	Data2  *float32
	Data3  *int32
	Data4  *int64
	Data5  *uint32
	Data6  *uint64
	Data7  *int32
	Data8  *int64
	Data9  *uint32
	Data10 *uint64
	Data11 *int32
	Data12 *int64
	Data13 *bool
	Data14 *string
	Data15 []byte
}

func (b0 TestFallbackTypes_builder) Build() *TestFallbackTypes {
	m0 := &TestFallbackTypes{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 16)
		x.xxx_hidden_Id = b.Id
	}
	if b.Data1 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 16)
		x.xxx_hidden_Data1 = *b.Data1
	}
	if b.Data2 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 16)
		x.xxx_hidden_Data2 = *b.Data2
	}
	if b.Data3 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 16)
		x.xxx_hidden_Data3 = *b.Data3
	}
	if b.Data4 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 16)
		x.xxx_hidden_Data4 = *b.Data4
	}
	if b.Data5 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 16)
		x.xxx_hidden_Data5 = *b.Data5
	}
	if b.Data6 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 16)
		x.xxx_hidden_Data6 = *b.Data6
	}
	if b.Data7 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 16)
		x.xxx_hidden_Data7 = *b.Data7
	}
	if b.Data8 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 16)
		x.xxx_hidden_Data8 = *b.Data8
	}
	if b.Data9 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 16)
		x.xxx_hidden_Data9 = *b.Data9
	}
	if b.Data10 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 16)
		x.xxx_hidden_Data10 = *b.Data10
	}
	if b.Data11 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 16)
		x.xxx_hidden_Data11 = *b.Data11
	}
	if b.Data12 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 16)
		x.xxx_hidden_Data12 = *b.Data12
	}
	if b.Data13 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 13, 16)
		x.xxx_hidden_Data13 = *b.Data13
	}
	if b.Data14 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 16)
		x.xxx_hidden_Data14 = b.Data14
	}
	if b.Data15 != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 15, 16)
		x.xxx_hidden_Data15 = b.Data15
	}
	return m0
}

var File_boostport_privacy_testing_test_proto protoreflect.FileDescriptor

var file_boostport_privacy_testing_test_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x1a, 0x1f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x31, 0x12, 0x1b, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x7d, 0x02, 0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x1b,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x7d, 0x02, 0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x1b, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x12,
	0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x22, 0x65,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x34, 0x22, 0xcb, 0x06, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x0a, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02,
	0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x3c, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x31,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x43, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x42, 0x05,
	0x82, 0x7d, 0x02, 0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x1b, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02,
	0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x12, 0x3c, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x35, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x31,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x12, 0x43, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x36,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x42, 0x05,
	0x82, 0x7d, 0x02, 0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x36, 0x12, 0x4e, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x37, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x37, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x05,
	0x82, 0x7d, 0x02, 0x12, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x37, 0x12, 0x47, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x38, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x38, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x38, 0x12, 0x4e, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x39, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x39, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x12, 0x00, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x39, 0x1a, 0x38, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x37, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x60, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x38, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x60, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x39, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xad, 0x04, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x7d, 0x02, 0x0a, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0e, 0x82, 0x7d, 0x0b, 0x12, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x20, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0x82, 0x7d, 0x07, 0x12, 0x05, 0x15, 0x00, 0x00, 0x80,
	0x3f, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x20, 0x01, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x35, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x36, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x30, 0x01, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x36, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x37, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x11, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x38, 0x02, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x37, 0x12, 0x1d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x38, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x12, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x40, 0x02, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x38, 0x12, 0x20, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x39, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x07, 0x42, 0x0a, 0x82, 0x7d, 0x07, 0x12, 0x05, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x39, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x30, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x0e, 0x82, 0x7d, 0x0b, 0x12, 0x09, 0x51, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x30, 0x12, 0x22, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0a, 0x82, 0x7d,
	0x07, 0x12, 0x05, 0x5d, 0x01, 0x00, 0x00, 0x00, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x31,
	0x12, 0x26, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x0e, 0x82, 0x7d, 0x0b, 0x12, 0x09, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x32, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x31, 0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0x82, 0x7d, 0x04, 0x12, 0x02, 0x68,
	0x01, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x33, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x82, 0x7d, 0x08, 0x12, 0x06,
	0x72, 0x04, 0x74, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x34, 0x12, 0x23,
	0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x31, 0x35, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b,
	0x82, 0x7d, 0x08, 0x12, 0x06, 0x7a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x35, 0x42, 0x80, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0xa2, 0x02, 0x03, 0x42, 0x50, 0x54, 0xaa, 0x02, 0x19, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x19, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74,
	0x5c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0xe2, 0x02, 0x25, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x5c, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x72, 0x74, 0x3a, 0x3a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x3a, 0x3a, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x70, 0xe8, 0x07,
})

var file_boostport_privacy_testing_test_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_boostport_privacy_testing_test_proto_goTypes = []any{
	(*TestNested1)(nil),       // 0: boostport.privacy.testing.TestNested1
	(*TestNested2)(nil),       // 1: boostport.privacy.testing.TestNested2
	(*TestMessage)(nil),       // 2: boostport.privacy.testing.TestMessage
	(*TestFallbackTypes)(nil), // 3: boostport.privacy.testing.TestFallbackTypes
	nil,                       // 4: boostport.privacy.testing.TestMessage.Data7Entry
	nil,                       // 5: boostport.privacy.testing.TestMessage.Data8Entry
	nil,                       // 6: boostport.privacy.testing.TestMessage.Data9Entry
}
var file_boostport_privacy_testing_test_proto_depIdxs = []int32{
	0, // 0: boostport.privacy.testing.TestMessage.data2:type_name -> boostport.privacy.testing.TestNested1
	1, // 1: boostport.privacy.testing.TestMessage.data3:type_name -> boostport.privacy.testing.TestNested2
	0, // 2: boostport.privacy.testing.TestMessage.data5:type_name -> boostport.privacy.testing.TestNested1
	1, // 3: boostport.privacy.testing.TestMessage.data6:type_name -> boostport.privacy.testing.TestNested2
	4, // 4: boostport.privacy.testing.TestMessage.data7:type_name -> boostport.privacy.testing.TestMessage.Data7Entry
	5, // 5: boostport.privacy.testing.TestMessage.data8:type_name -> boostport.privacy.testing.TestMessage.Data8Entry
	6, // 6: boostport.privacy.testing.TestMessage.data9:type_name -> boostport.privacy.testing.TestMessage.Data9Entry
	0, // 7: boostport.privacy.testing.TestMessage.Data8Entry.value:type_name -> boostport.privacy.testing.TestNested1
	1, // 8: boostport.privacy.testing.TestMessage.Data9Entry.value:type_name -> boostport.privacy.testing.TestNested2
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_boostport_privacy_testing_test_proto_init() }
func file_boostport_privacy_testing_test_proto_init() {
	if File_boostport_privacy_testing_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_boostport_privacy_testing_test_proto_rawDesc), len(file_boostport_privacy_testing_test_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_boostport_privacy_testing_test_proto_goTypes,
		DependencyIndexes: file_boostport_privacy_testing_test_proto_depIdxs,
		MessageInfos:      file_boostport_privacy_testing_test_proto_msgTypes,
	}.Build()
	File_boostport_privacy_testing_test_proto = out.File
	file_boostport_privacy_testing_test_proto_goTypes = nil
	file_boostport_privacy_testing_test_proto_depIdxs = nil
}
